
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140801 (SVN rev 36)
// Mon Jan 23 16:51:15 ART 2017
//----------------------------------------------------

package tp.compiladores;

import java_cup.runtime.*;
import java.util.LinkedList;
import tp.compiladores.ast.*;
import tp.compiladores.semcheck.TypeCheckVisitor;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140801 (SVN rev 36) generated parser.
  * @version Mon Jan 23 16:51:15 ART 2017
  */
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\036\002\000\002\002\007\000\002\002" +
    "\004\000\002\037\002\000\002\002\010\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\007\004\000" +
    "\002\007\005\000\002\006\004\000\002\010\003\000\002" +
    "\010\005\000\002\011\003\000\002\011\006\000\002\004" +
    "\003\000\002\004\004\000\002\040\002\000\002\005\010" +
    "\000\002\041\002\000\002\042\002\000\002\005\012\000" +
    "\002\012\004\000\002\012\006\000\002\015\004\000\002" +
    "\015\005\000\002\015\005\000\002\015\006\000\002\013" +
    "\003\000\002\013\004\000\002\014\006\000\002\014\004" +
    "\000\002\043\002\000\002\014\011\000\002\044\002\000" +
    "\002\014\012\000\002\045\002\000\002\014\006\000\002" +
    "\014\005\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\003\000\002\046\002\000\002\014\004" +
    "\000\002\016\002\000\002\047\002\000\002\016\005\000" +
    "\002\025\003\000\002\025\004\000\002\025\004\000\002" +
    "\017\005\000\002\017\006\000\002\017\010\000\002\017" +
    "\012\000\002\050\002\000\002\023\004\000\002\023\005" +
    "\000\002\024\003\000\002\051\002\000\002\022\004\000" +
    "\002\022\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\021\004\000\002\021" +
    "\004\000\002\021\005\000\002\020\003\000\002\020\006" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\004\000\002\030\004" +
    "\000\002\031\004\000\002\031\004\000\002\032\003\000" +
    "\002\032\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\034\003" +
    "\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\004\004\005\001\002\000\004\002\252\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\014\007\001\026\ufffe\027\ufffe\030\ufffe\032\ufffe\001" +
    "\002\000\012\026\014\027\016\030\021\032\020\001\002" +
    "\000\004\007\012\001\002\000\004\002\000\001\002\000" +
    "\014\007\ufffb\026\014\027\016\030\021\032\020\001\002" +
    "\000\010\005\uffa9\013\uffa9\015\uffa9\001\002\000\014\007" +
    "\ufffc\026\014\027\016\030\021\032\020\001\002\000\010" +
    "\005\uffa8\013\uffa8\015\uffa8\001\002\000\004\007\245\001" +
    "\002\000\010\005\uffa7\013\uffa7\015\uffa7\001\002\000\010" +
    "\005\uffa6\013\uffa6\015\uffa6\001\002\000\004\005\026\001" +
    "\002\000\014\007\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2" +
    "\001\002\000\004\014\025\001\002\000\040\005\ufff9\006" +
    "\ufff9\007\ufff9\014\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\032" +
    "\ufff9\001\002\000\012\010\034\012\037\014\ufff4\015\ufff4" +
    "\001\002\000\006\014\ufff6\015\ufff6\001\002\000\006\014" +
    "\ufff7\015\031\001\002\000\004\005\032\001\002\000\010" +
    "\010\034\014\ufff4\015\ufff4\001\002\000\006\014\ufff5\015" +
    "\ufff5\001\002\000\004\033\035\001\002\000\004\011\036" +
    "\001\002\000\006\014\ufff3\015\ufff3\001\002\000\014\013" +
    "\041\026\uffee\027\uffee\030\uffee\032\uffee\001\002\000\012" +
    "\026\014\027\016\030\021\032\020\001\002\000\004\006" +
    "\ufff0\001\002\000\004\006\043\001\002\000\040\005\061" +
    "\006\uffd6\007\065\014\051\016\063\017\057\021\056\022" +
    "\064\023\054\024\062\025\050\026\014\027\016\030\021" +
    "\032\020\001\002\000\014\007\uffef\026\uffef\027\uffef\030" +
    "\uffef\032\uffef\001\002\000\004\014\233\001\002\000\010" +
    "\035\224\036\225\044\223\001\002\000\040\005\061\006" +
    "\uffd6\007\220\014\051\016\063\017\057\021\056\022\064" +
    "\023\054\024\062\025\050\026\014\027\016\030\021\032" +
    "\020\001\002\000\004\014\215\001\002\000\030\005\uffd7" +
    "\006\uffd7\007\uffd7\014\uffd7\016\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\001\002\000\030\005\uffe5" +
    "\006\uffe5\007\uffe5\014\uffe5\016\uffe5\017\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\001\002\000\004\006\043" +
    "\001\002\000\026\005\061\012\074\016\063\031\075\033" +
    "\071\034\104\036\072\047\103\050\073\051\076\001\002" +
    "\000\004\005\032\001\002\000\030\005\061\012\074\014" +
    "\206\016\063\031\075\033\071\034\104\036\072\047\103" +
    "\050\073\051\076\001\002\000\004\012\175\001\002\000" +
    "\030\005\061\006\uffd6\007\174\014\051\016\063\017\057" +
    "\021\056\022\064\023\054\024\062\025\050\001\002\000" +
    "\046\006\uffbc\010\161\011\uffbc\012\160\013\uffbc\014\uffbc" +
    "\015\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\001\002" +
    "\000\004\014\157\001\002\000\004\012\142\001\002\000" +
    "\004\005\066\001\002\000\042\005\uffe9\006\uffe9\007\uffe9" +
    "\014\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032\uffe9" +
    "\001\002\000\004\044\067\001\002\000\026\005\061\012" +
    "\074\016\063\031\075\033\071\034\104\036\072\047\103" +
    "\050\073\051\076\001\002\000\042\006\uffc2\011\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\001\002\000\042\006\uffa5\011\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\001\002" +
    "\000\026\005\061\012\074\016\063\031\075\033\071\034" +
    "\104\036\072\047\103\050\073\051\076\001\002\000\042" +
    "\006\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\001\002\000\026\005\061\012" +
    "\074\016\063\031\075\033\071\034\104\036\072\047\103" +
    "\050\073\051\076\001\002\000\042\006\uffa3\011\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\001\002\000\042\006\uffa0\011\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\001\002" +
    "\000\042\006\uffa2\011\uffa2\013\uffa2\014\uffa2\015\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\047\uffa2\001\002\000\042\006" +
    "\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\001\002\000\032\015\133\035\112" +
    "\036\107\037\123\040\106\041\115\042\120\043\111\044" +
    "\122\045\116\046\121\047\124\001\002\000\042\006\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\001\002\000\026\005\061\012\074\016" +
    "\063\031\075\033\071\034\104\036\072\047\103\050\073" +
    "\051\076\001\002\000\042\006\uffa4\011\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\001" +
    "\002\000\042\006\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001\002\000\026" +
    "\005\uffb2\012\uffb2\016\uffb2\031\uffb2\033\uffb2\034\uffb2\036" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\001\002\000\026\005\uffb5" +
    "\012\uffb5\016\uffb5\031\uffb5\033\uffb5\034\uffb5\036\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\001\002\000\026\005\uffb9\012\uffb9" +
    "\016\uffb9\031\uffb9\033\uffb9\034\uffb9\036\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\001\002\000\030\005\uffb1\012\uffb1\016\uffb1" +
    "\031\uffb1\033\uffb1\034\uffb1\036\uffb1\044\132\047\uffb1\050" +
    "\uffb1\051\uffb1\001\002\000\026\005\uffb6\012\uffb6\016\uffb6" +
    "\031\uffb6\033\uffb6\034\uffb6\036\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\001\002\000\026\005\uffb7\012\uffb7\016\uffb7\031\uffb7" +
    "\033\uffb7\034\uffb7\036\uffb7\047\uffb7\050\uffb7\051\uffb7\001" +
    "\002\000\026\005\061\012\074\016\063\031\075\033\071" +
    "\034\104\036\072\047\103\050\073\051\076\001\002\000" +
    "\026\005\uffb4\012\uffb4\016\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\036\uffb4\047\uffb4\050\uffb4\051\uffb4\001\002\000\026\005" +
    "\uffab\012\uffab\016\uffab\031\uffab\033\uffab\034\uffab\036\uffab" +
    "\047\uffab\050\uffab\051\uffab\001\002\000\026\005\uffba\012" +
    "\uffba\016\uffba\031\uffba\033\uffba\034\uffba\036\uffba\047\uffba" +
    "\050\uffba\051\uffba\001\002\000\030\005\uffb0\012\uffb0\016" +
    "\uffb0\031\uffb0\033\uffb0\034\uffb0\036\uffb0\044\130\047\uffb0" +
    "\050\uffb0\051\uffb0\001\002\000\026\005\uffaa\012\uffaa\016" +
    "\uffaa\031\uffaa\033\uffaa\034\uffaa\036\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\001\002\000\004\044\127\001\002\000\026\005" +
    "\uffb3\012\uffb3\016\uffb3\031\uffb3\033\uffb3\034\uffb3\036\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\001\002\000\004\044\126\001" +
    "\002\000\026\005\uffb8\012\uffb8\016\uffb8\031\uffb8\033\uffb8" +
    "\034\uffb8\036\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002\000" +
    "\026\005\uffac\012\uffac\016\uffac\031\uffac\033\uffac\034\uffac" +
    "\036\uffac\047\uffac\050\uffac\051\uffac\001\002\000\026\005" +
    "\uffad\012\uffad\016\uffad\031\uffad\033\uffad\034\uffad\036\uffad" +
    "\047\uffad\050\uffad\051\uffad\001\002\000\026\005\uffae\012" +
    "\uffae\016\uffae\031\uffae\033\uffae\034\uffae\036\uffae\047\uffae" +
    "\050\uffae\051\uffae\001\002\000\042\006\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\035\112\036\107\037\123\040\106" +
    "\041\115\042\120\043\111\044\122\045\116\046\121\047" +
    "\124\001\002\000\026\005\uffaf\012\uffaf\016\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\036\uffaf\047\uffaf\050\uffaf\051\uffaf\001" +
    "\002\000\026\005\061\012\074\016\063\031\075\033\071" +
    "\034\104\036\072\047\103\050\073\051\076\001\002\000" +
    "\032\006\uffdf\035\112\036\107\037\123\040\106\041\115" +
    "\042\120\043\111\044\122\045\116\046\121\047\124\001" +
    "\002\000\004\006\043\001\002\000\030\005\uffde\006\uffde" +
    "\007\uffde\014\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\001\002\000\032\013\140\035\112" +
    "\036\107\037\123\040\106\041\115\042\120\043\111\044" +
    "\122\045\116\046\121\047\124\001\002\000\042\006\uffbd" +
    "\011\uffbd\013\uffbd\014\uffbd\015\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\001\002\000\042\006\uffbf\011\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\001\002\000\004\031\143\001\002\000\004\015\144" +
    "\001\002\000\012\026\014\027\016\030\021\032\020\001" +
    "\002\000\006\013\147\015\146\001\002\000\026\005\uffca" +
    "\012\uffca\016\uffca\031\uffca\033\uffca\034\uffca\036\uffca\047" +
    "\uffca\050\uffca\051\uffca\001\002\000\042\006\uffcc\011\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\001\002\000\026\005\061\012\074\016\063\031" +
    "\075\033\071\034\104\036\072\047\103\050\073\051\076" +
    "\001\002\000\006\013\153\015\152\001\002\000\026\005" +
    "\061\012\074\016\063\031\075\033\071\034\104\036\072" +
    "\047\103\050\073\051\076\001\002\000\042\006\uffcb\011" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\001\002\000\006\013\uffc8\015\uffc8\001\002" +
    "\000\034\013\uffc7\015\uffc7\035\112\036\107\037\123\040" +
    "\106\041\115\042\120\043\111\044\122\045\116\046\121" +
    "\047\124\001\002\000\006\013\uffc9\015\uffc9\001\002\000" +
    "\030\005\uffd9\006\uffd9\007\uffd9\014\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\001\002\000" +
    "\030\005\uffc6\012\uffc6\013\164\016\uffc6\031\uffc6\033\uffc6" +
    "\034\uffc6\036\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000" +
    "\026\005\061\012\074\016\063\031\075\033\071\034\104" +
    "\036\072\047\103\050\073\051\076\001\002\000\032\011" +
    "\163\035\112\036\107\037\123\040\106\041\115\042\120" +
    "\043\111\044\122\045\116\046\121\047\124\001\002\000" +
    "\042\006\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\001\002\000\042\006\uffce" +
    "\011\uffce\013\uffce\014\uffce\015\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\001\002\000\006\013\171\015\170\001" +
    "\002\000\026\005\061\012\074\016\063\031\075\033\071" +
    "\034\104\036\072\047\103\050\073\051\076\001\002\000" +
    "\034\013\uffc5\015\uffc5\035\112\036\107\037\123\040\106" +
    "\041\115\042\120\043\111\044\122\045\116\046\121\047" +
    "\124\001\002\000\026\005\061\012\074\016\063\031\075" +
    "\033\071\034\104\036\072\047\103\050\073\051\076\001" +
    "\002\000\042\006\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002\000\034" +
    "\013\uffc4\015\uffc4\035\112\036\107\037\123\040\106\041" +
    "\115\042\120\043\111\044\122\045\116\046\121\047\124" +
    "\001\002\000\030\005\uffe4\006\uffe4\007\uffe4\014\uffe4\016" +
    "\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\001\002\000\042\005\uffe7\006\uffe7\007\uffe7\014\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\001\002\000" +
    "\026\005\061\012\074\016\063\031\075\033\071\034\104" +
    "\036\072\047\103\050\073\051\076\001\002\000\032\013" +
    "\177\035\112\036\107\037\123\040\106\041\115\042\120" +
    "\043\111\044\122\045\116\046\121\047\124\001\002\000" +
    "\004\006\uffe1\001\002\000\004\006\043\001\002\000\032" +
    "\005\uffd4\006\uffd4\007\uffd4\014\uffd4\016\uffd4\017\uffd4\020" +
    "\203\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\001\002" +
    "\000\030\005\uffe0\006\uffe0\007\uffe0\014\uffe0\016\uffe0\017" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\001\002" +
    "\000\004\006\uffd3\001\002\000\004\006\043\001\002\000" +
    "\030\005\uffd2\006\uffd2\007\uffd2\014\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\001\002\000" +
    "\030\005\uffda\006\uffda\007\uffda\014\uffda\016\uffda\017\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\001\002\000" +
    "\032\014\210\035\112\036\107\037\123\040\106\041\115" +
    "\042\120\043\111\044\122\045\116\046\121\047\124\001" +
    "\002\000\030\005\uffdb\006\uffdb\007\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\001" +
    "\002\000\032\006\uffdd\035\112\036\107\037\123\040\106" +
    "\041\115\042\120\043\111\044\122\045\116\046\121\047" +
    "\124\001\002\000\004\006\043\001\002\000\030\005\uffdc" +
    "\006\uffdc\007\uffdc\014\uffdc\016\uffdc\017\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\001\002\000\030\005\uffd5" +
    "\006\uffd5\007\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\001\002\000\030\005\uffd8" +
    "\006\uffd8\007\uffd8\014\uffd8\016\uffd8\017\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\001\002\000\004\014\222" +
    "\001\002\000\030\005\061\006\uffd6\007\221\014\051\016" +
    "\063\017\057\021\056\022\064\023\054\024\062\025\050" +
    "\001\002\000\042\005\uffe8\006\uffe8\007\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\001\002\000" +
    "\042\005\uffe6\006\uffe6\007\uffe6\014\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\032\uffe6\001\002\000\040\005\ufff8" +
    "\006\ufff8\007\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\032\ufff8\001\002\000\026\005\uffd1\012\uffd1\016\uffd1\031" +
    "\uffd1\033\uffd1\034\uffd1\036\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\001\002\000\004\044\232\001\002\000\004\044\231\001" +
    "\002\000\026\005\061\012\074\016\063\031\075\033\071" +
    "\034\104\036\072\047\103\050\073\051\076\001\002\000" +
    "\032\014\230\035\112\036\107\037\123\040\106\041\115" +
    "\042\120\043\111\044\122\045\116\046\121\047\124\001" +
    "\002\000\030\005\uffe3\006\uffe3\007\uffe3\014\uffe3\016\uffe3" +
    "\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\001" +
    "\002\000\026\005\uffcf\012\uffcf\016\uffcf\031\uffcf\033\uffcf" +
    "\034\uffcf\036\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000" +
    "\026\005\uffd0\012\uffd0\016\uffd0\031\uffd0\033\uffd0\034\uffd0" +
    "\036\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\030\005" +
    "\uffe2\006\uffe2\007\uffe2\014\uffe2\016\uffe2\017\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\001\002\000\004\005" +
    "\244\001\002\000\006\013\237\015\236\001\002\000\012" +
    "\026\014\027\016\030\021\032\020\001\002\000\004\006" +
    "\uffed\001\002\000\004\006\043\001\002\000\014\007\uffec" +
    "\026\uffec\027\uffec\030\uffec\032\uffec\001\002\000\004\005" +
    "\243\001\002\000\006\013\uffea\015\uffea\001\002\000\006" +
    "\013\uffeb\015\uffeb\001\002\000\004\002\ufffd\001\002\000" +
    "\014\007\ufffa\026\014\027\016\030\021\032\020\001\002" +
    "\000\014\007\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\001" +
    "\002\000\004\005\251\001\002\000\004\012\037\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\010\037\007" +
    "\001\001\000\016\003\016\004\012\005\022\006\023\007" +
    "\014\033\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\246\033\247\001\001\000\002\001\001\000" +
    "\012\004\245\005\022\006\215\033\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\027\011\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\037\001\001" +
    "\000\006\012\234\033\233\001\001\000\004\040\041\001" +
    "\001\000\004\015\043\001\001\000\022\006\023\007\046" +
    "\013\057\014\051\017\044\020\045\033\054\046\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\225" +
    "\001\001\000\020\006\215\013\216\014\051\017\044\020" +
    "\045\033\054\046\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\213\001\001\000" +
    "\014\017\067\020\101\021\210\034\076\035\077\001\001" +
    "\000\006\010\027\011\026\001\001\000\014\017\067\020" +
    "\101\021\206\034\076\035\077\001\001\000\002\001\001" +
    "\000\012\014\172\017\044\020\045\046\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\067\020\101\021\100\034\076\035\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\067\020\101\021" +
    "\140\034\076\035\077\001\001\000\002\001\001\000\014" +
    "\017\067\020\101\021\136\034\076\035\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\113\027\116\030\107\031\124\032" +
    "\112\001\001\000\002\001\001\000\014\017\067\020\101" +
    "\021\104\034\076\035\077\001\001\000\002\001\001\000" +
    "\014\026\113\027\116\030\107\031\124\032\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\067\020\101\021\130\034\076\035\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\026\113\027" +
    "\116\030\107\031\124\032\112\001\001\000\002\001\001" +
    "\000\014\017\067\020\101\021\133\034\076\035\077\001" +
    "\001\000\016\026\113\027\116\030\107\031\124\032\112" +
    "\044\134\001\001\000\004\015\135\001\001\000\002\001" +
    "\001\000\014\026\113\027\116\030\107\031\124\032\112" +
    "\001\001\000\002\001\001\000\014\026\113\027\116\030" +
    "\107\031\124\032\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\144\001\001\000\002\001\001\000" +
    "\006\023\150\050\147\001\001\000\002\001\001\000\016" +
    "\017\067\020\101\021\154\024\155\034\076\035\077\001" +
    "\001\000\002\001\001\000\016\017\067\020\101\021\154" +
    "\024\153\034\076\035\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\026\113\027\116\030\107\031\124" +
    "\032\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\164\051\165\001\001\000\014\017\067\020\101" +
    "\021\161\034\076\035\077\001\001\000\014\026\113\027" +
    "\116\030\107\031\124\032\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\067\020" +
    "\101\021\166\034\076\035\077\001\001\000\014\026\113" +
    "\027\116\030\107\031\124\032\112\001\001\000\014\017" +
    "\067\020\101\021\171\034\076\035\077\001\001\000\002" +
    "\001\001\000\014\026\113\027\116\030\107\031\124\032" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\067\020\101\021\175\034\076\035\077\001\001\000" +
    "\014\026\113\027\116\030\107\031\124\032\112\001\001" +
    "\000\004\043\177\001\001\000\004\015\200\001\001\000" +
    "\004\016\201\001\001\000\002\001\001\000\004\047\203" +
    "\001\001\000\004\015\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\026\113\027\116\030\107\031\124" +
    "\032\112\001\001\000\002\001\001\000\016\026\113\027" +
    "\116\030\107\031\124\032\112\045\211\001\001\000\004" +
    "\015\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\172\017\044" +
    "\020\045\046\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\067\020\101\021\226\034" +
    "\076\035\077\001\001\000\014\026\113\027\116\030\107" +
    "\031\124\032\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\241\001\001\000\004\042" +
    "\237\001\001\000\004\015\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\246\033\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    //Actual scope
    Ent actual;

    Stack<Ent> entStack = new Stack<Ent>();
    LinkedList<AST> ASTList = new LinkedList<AST>();
    LinkedList<MyAttribute> list = new LinkedList<MyAttribute>();
    LinkedList<Type> auxList = new LinkedList<Type>();
    //Auxiliar expression list
    LinkedList<Expression> exprList = new LinkedList<Expression>();
    LinkedList<Expression> exArgList = new LinkedList<Expression>();
    //Auxiliar statement list
    LinkedList<Statement> stmtList = new LinkedList<Statement>();
    //Auxiliar filed list
    LinkedList<String> fieldList = new LinkedList<String>();
    //List of errors found
    LinkedList<SemError> errors = new LinkedList<SemError>();
    //Auxiliar MethodDecls list
    LinkedList<MethodDecl> methDList = new LinkedList<MethodDecl>();

    int offset = 0;

    public LinkedList<AST> getAST(){
        return ASTList;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
Ent sup = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS ID LLLAVE NT$0 RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
list = new LinkedList();actual = new Ent(null);entStack.push(actual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= CLASS ID LLLAVE NT$1 declaration RLLAVE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= field_decls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= method_decls 
            {
              Object RESULT =null;
		if(/*actual*/entStack.peek().get("main")==null){
                                    errors.add(new SemError(0,0,"Method main not find"));
                                    this.parser.report_error("Method main not find", "main");
                                }else{
                                    MyAttribute mainMeth = (MyAttribute) /*actual*/entStack.peek().get("main").value;
                                    if (mainMeth.getList().size() > 0){
                                        errors.add(new SemError(0,0,"Method main musnt have parameters"));
                                        this.parser.report_error("Method main musnt have parameters", "main");
                                    }
                                }    
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= field_decls method_decls 
            {
              Object RESULT =null;
		if(/*actual*/entStack.peek().get("main")==null){
                                                errors.add(new SemError(0,0,"Method main didnt find"));
                                                this.parser.report_error("Method main didnt find", "main");
                                            }else{
                                                MyAttribute mainMeth = (MyAttribute) /*actual*/entStack.peek().get("main").value;
                                                if (mainMeth.getList().size() > 0){
                                                    errors.add(new SemError(0,0,"Method main musnt have parameters"));
                                                    this.parser.report_error("Method main musnt have parameters", "main");
                                                }
                                            }    
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decls ::= field_decl PUNTOYCOMA 
            {
              LinkedList<String> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> fd = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList(fd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_decls ::= field_decls field_decl PUNTOYCOMA 
            {
              LinkedList<String> RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> fds = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> fd = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		for(String s: fd){fds.add(s);}RESULT = fds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_decl ::= type identificadores 
            {
              LinkedList<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> idents = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        for (MyAttribute at: list) {
            if (at.whatAmI() == "variable"){
                //Searchs the variables on the atribute list and adds it to the actual scope
                entStack.peek().put(at.getId(),new MyAttribute(at.getId(),t)); //put(id,MyAttribute(type)) 
            }else{
                entStack.peek().put(at.getId(),new MyAttribute(at.getId(),t,at.getLength())); //put(id,MyAttribute(type,length))
            }
        }
        RESULT = idents;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identificadores ::= identificador 
            {
              LinkedList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		fieldList= new LinkedList(); fieldList.add(id); RESULT = fieldList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identificadores ::= identificadores COMA identificador 
            {
              LinkedList<String> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> idList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		idList.add(id); RESULT = idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identificador ::= ID 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(new MyAttribute(ident,null)); RESULT = ident;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identificador ::= ID LCORCHETE INTEGER RCORCHETE 
            {
              String RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lengthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lengthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //New array
                    int intLength = length; //Parse the length of the array
                    if(intLength > 0){  
                        list.add(new MyAttribute((String) ident,null, intLength));} //If the array length is greater than zero, then it's added to the scope
                    else {
                        errors.add(new SemError(lengthleft,lengthright,"Array length lower than 1")); //Creates a new error and adds it to the error list
                        this.parser.report_error("Array length lower than 1", length); //Reports the error
                    }
                    RESULT = ident;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_decls ::= method_decl 
            {
              LinkedList<MethodDecl> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_decls ::= method_decls method_decl 
            {
              LinkedList<MethodDecl> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
auxList= new LinkedList(); entStack.peek().put(ident,new MyAttribute(ident,t,auxList));list = new LinkedList(); Ent actual = new Ent(entStack.peek());entStack.push(actual);offset=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_decl ::= type ID LPARENTESIS RPARENTESIS NT$2 block 
            {
              MethodDecl RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (MethodDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 MethodDecl methD = new MethodDecl(ident,t,null,blk,blkleft,blkright);ASTList.add(methD);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
auxList = new LinkedList();list = new LinkedList();Ent actual = new Ent(entStack.peek());entStack.push(actual);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$4 ::= 
            {
              MethodDecl RESULT =(MethodDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
entStack.peek().getPrev().put(ident,new MyAttribute(ident,t,auxList));offset=0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_decl ::= type ID LPARENTESIS NT$3 param RPARENTESIS NT$4 block 
            {
              MethodDecl RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (MethodDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block blk = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		/*ASTList.add(blk);*/ MethodDecl methD = new MethodDecl(ident,t,auxList,blk,blkleft,blkright);ASTList.add(methD);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (t.equals(Type.VOID)){
                    errors.add(new SemError(tleft,tright,"Void can't be used as type for a parameter")); //If a parameter is declared as Void
                    this.parser.report_error("Void can't be used as type for a parameter", t);

                }auxList.add(t);entStack.peek().put(id, new MyAttribute(id,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param ::= param COMA type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (t.equals(Type.VOID)){
                    errors.add(new SemError(tleft,tright,"Void can't be used as type for a parameter")); //If a parameter is declared as Void
                    this.parser.report_error("Void can't be used as type for a parameter", t);

                }auxList.add(t);/*actual*/entStack.peek().put(id, new MyAttribute(id,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= LLLAVE RLLAVE 
            {
              Block RESULT =null;
		RESULT = new Block(1);entStack.pop();list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block ::= LLLAVE field_decls RLLAVE 
            {
              Block RESULT =null;
		int fieldDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> fieldDecl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Block(1,null,fieldDecl);entStack.pop();list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= LLLAVE recursive_statement RLLAVE 
            {
              Block RESULT =null;
		int recurStleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int recurStright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> recurSt = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Block(1,recurSt,null);entStack.pop();list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block ::= LLLAVE field_decls recursive_statement RLLAVE 
            {
              Block RESULT =null;
		int fieldDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> fieldDecl = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int recurStleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int recurStright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> recurSt = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Block(1,recurSt,fieldDecl);Ent a = entStack.pop();list = new LinkedList();a.showCurrent();/*System.out.println(entStack.size());*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // recursive_statement ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		stmtList= new LinkedList(); stmtList.add(st); RESULT = stmtList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // recursive_statement ::= recursive_statement statement 
            {
              LinkedList<Statement> RESULT =null;
		int recStleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int recStright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> recSt = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		recSt.add(st); RESULT = recSt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recursive_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= location assign_op expr PUNTOYCOMA 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int assOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int assOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignOpType assOp = (AssignOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmt(l,assOp,e,assOpleft,assOpright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= method_call PUNTOYCOMA 
            {
              Statement RESULT =null;
		int methCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int methCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodExpr methCall = (MethodExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new MethodStmt(methCall,methCallleft,methCallright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
list = new LinkedList();Ent actual = new Ent(entStack.peek());entStack.push(actual);list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= IF LPARENTESIS expr RPARENTESIS NT$5 block else_stmt 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ifBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block ifBlock = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block elseBlock = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(exp, ifBlock, elseBlock,expleft,expright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$6 ::= 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expI = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expF = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
/*Ent sup = actual; Ent actual = new Ent(sup);*/Ent actual = new Ent(entStack.peek()/*sup*/);entStack.push(actual);list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= FOR ID IGUAL expr COMA expr NT$6 block 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression expI = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expF = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.setInCycleB(true);offset=offset+8;RESULT = new ForStmt(new VarLocation(id,Type.VOID,offset,idleft,idright),expI,expF,b,idleft,idright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
list = new LinkedList();Ent actual = new Ent(entStack.peek());entStack.push(actual);list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= WHILE expr NT$7 block 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.setInCycleB(true);RESULT = new WhileStmt(cond,b,condleft,condright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= RETURN expr PUNTOYCOMA 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStmt(exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= RETURN PUNTOYCOMA 
            {
              Statement RESULT =null;
		RESULT = new ReturnStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= BREAK PUNTOYCOMA 
            {
              Statement RESULT =null;
		RESULT = new BreakStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= CONTINUE PUNTOYCOMA 
            {
              Statement RESULT =null;
		RESULT = new ContinueStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= PUNTOYCOMA 
            {
              Statement RESULT =null;
		RESULT = new PuntoYComaStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Statement RESULT =null;
list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= NT$8 block 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Block(1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // else_stmt ::= 
            {
              Block RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Block RESULT =null;
list = new LinkedList();Ent actual = new Ent(entStack.peek());entStack.push(actual);list = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else_stmt ::= ELSE NT$9 block 
            {
              Block RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Block) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bElse = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = bElse;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_op ::= IGUAL 
            {
              AssignOpType RESULT =null;
		RESULT = AssignOpType.ASSIGN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_op ::= SUMA IGUAL 
            {
              AssignOpType RESULT =null;
		RESULT = AssignOpType.INCREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign_op ::= MENOS IGUAL 
            {
              AssignOpType RESULT =null;
		RESULT = AssignOpType.DECREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_call ::= ID LPARENTESIS RPARENTESIS 
            {
              MethodExpr RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		MyAttribute method = (MyAttribute) /*actual*/entStack.peek().get(ident).value ;
                                                 if (method.getList().size() != 0){
                                                    errors.add(new SemError(identleft,identright,"This method doesn't have arguments")); //If the method doesn't have arguments but instead it's called with them, adds a error to the list
                                                    this.parser.report_error("This method doesn't have arguments", ident);
                                                 }else{
                                                    /*if(ident.equalsIgnoreCase("externinvk")){
                                                        RESULT = new MethodExpr(exprList,true,identleft,identright);
                                                    }else{*/
                                                        RESULT = new MethodExpr(ident,method.getType(),null,null,identleft,identright);
                                                    /*}*/
                                                 }
                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call ::= ID LPARENTESIS exprs RPARENTESIS 
            {
              MethodExpr RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> exprList = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                /*System.out.println(ident);
                if(ident.equalsIgnoreCase("externinvk")){
                        System.out.println("Nunca entra1");
                    RESULT = new MethodExpr(exprList,true,identleft,identright);
                }else{*/
                    MyAttribute method = (MyAttribute) /*actual*/entStack.peek().get(ident).value;
                    RESULT = new MethodExpr((String) ident,method.getType(),exprList,method.getList(),identleft,identright);
                /*}*/
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_call ::= EXTERNINVK LPARENTESIS STRING COMA type RPARENTESIS 
            {
              MethodExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    System.out.println("Nunca entra2");
                    if (s != null){
                        RESULT = new MethodExpr(s,t,null,true,eleft,eright);
                    } 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_call ::= EXTERNINVK LPARENTESIS STRING COMA type COMA externinvk_args RPARENTESIS 
            {
              MethodExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> exArg = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*System.out.println("Nunca entra3");*/ RESULT = new MethodExpr(s,t,exArg,true,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$10 ::= 
            {
              LinkedList<Expression> RESULT =null;
 exArgList = new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // externinvk_args ::= NT$10 externinvk_arg 
            {
              LinkedList<Expression> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (LinkedList<Expression>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exArg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exArgList.add((Expression)exArg); RESULT = exArgList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_args",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // externinvk_args ::= externinvk_args COMA externinvk_arg 
            {
              LinkedList<Expression> RESULT =null;
		int exArgsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exArgsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> exArgs = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exArgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exArgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exArg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		exArgs.add((Expression)exArg); RESULT = exArgs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_args",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // externinvk_arg ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$11 ::= 
            {
              LinkedList<Expression> RESULT =null;
auxList= new LinkedList(); exprList= new LinkedList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprs ::= NT$11 expr 
            {
              LinkedList<Expression> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (LinkedList<Expression>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		exprList.add(e); RESULT = exprList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprs ::= exprs COMA expr 
            {
              LinkedList<Expression> RESULT =null;
		int exprssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> exprss = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		exprss.add(e); RESULT = exprss;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = loc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= method_call 
            {
              Expression RESULT =null;
		int methCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int methCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodExpr methCall = (MethodExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = methCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= literal 
            {
              Expression RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal lit = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lit;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr bin_op expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinOpType bop = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinOpExpr(e1,bop,e2,bopleft,bopright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= MENOS expr 
            {
              Expression RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOpExpr(e1,UnaryOpType.MINUS,e1left,e1right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= ADMIRACION expr 
            {
              Expression RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnaryOpExpr(e1,UnaryOpType.NOT,e1left,e1right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= LPARENTESIS expr RPARENTESIS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // location ::= ID 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(entStack.peek().get(id) == null){
                            errors.add(new SemError(idleft,idright,"Null id: "));
                            this.parser.report_error("Null id: "+id, id);
                    }
                
                MyAttribute var = (MyAttribute) entStack.peek().get(id).value;offset = offset+8; VarLocation varL = new VarLocation(id,var.getType(),offset,idleft,idright); RESULT= varL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // location ::= ID LCORCHETE expr RCORCHETE 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(/*actual*/entStack.peek().get(id) == null){
                            errors.add(new SemError(idleft,idright,"Null id: "));
                            this.parser.report_error("Null id: "+id, id);
                    }
                    MyAttribute var = (MyAttribute) /*actual*/entStack.peek().get(id).value;
                    RESULT = new ArrayLocation(id,exp,var.getType(),expleft,expright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bin_op ::= arith_op 
            {
              BinOpType RESULT =null;
		int arithleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arithright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType arith = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = arith;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_op ::= rel_op 
            {
              BinOpType RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType rel = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_op ::= eq_op 
            {
              BinOpType RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType eq = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = eq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bin_op ::= cond_op 
            {
              BinOpType RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType cond = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arith_op ::= SUMA 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.PLUS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arith_op ::= MENOS 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.MINUS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arith_op ::= MULTIPLICACION 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.MULTIPLY;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arith_op ::= DIVISION 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.DIVIDE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arith_op ::= DIVENTERA 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.MOD;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // rel_op ::= MENOR 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.LE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rel_op ::= MAYOR 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.GE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // rel_op ::= MENOR IGUAL 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.LEQ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rel_op ::= MAYOR IGUAL 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.GEQ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // eq_op ::= IGUAL IGUAL 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.CEQ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // eq_op ::= ADMIRACION IGUAL 
            {
              BinOpType RESULT =null;
		RESULT = BinOpType.NEQ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond_op ::= CONJUNCION 
            {
              BinOpType RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = BinOpType.AND;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond_op ::= DISYUNCION 
            {
              BinOpType RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = BinOpType.OR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type ::= INT 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type ::= FLT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		RESULT = Type.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type ::= VOID 
            {
              Type RESULT =null;
		RESULT = Type.VOID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		auxList.add(Type.INT); RESULT = new IntLiteral(i.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= FLOAT 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		auxList.add(Type.FLOAT); RESULT = new FloatLiteral(f.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= STRING 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StringLiteral(s.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= bool_literal 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal b = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		auxList.add(Type.BOOLEAN); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bool_literal ::= TRUE 
            {
              Literal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BoolLiteral(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bool_literal ::= FALSE 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BoolLiteral(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

